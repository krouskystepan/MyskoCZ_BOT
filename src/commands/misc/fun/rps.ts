import {
  ActionRowBuilder,
  ApplicationCommandOptionType,
  ButtonBuilder,
  ButtonStyle,
  CommandInteractionOptionResolver,
  EmbedBuilder,
} from 'discord.js'
import { CommandData, CommandOptions, SlashCommandProps } from 'commandkit'
import GuildConfiguration from '../../../models/GuildConfiguration'

const choices = [
  {
    name: 'k√°men',
    emoji: 'ü™®',
    beats: 'n≈Ø≈æky',
  },
  {
    name: 'n≈Ø≈æky',
    emoji: '‚úÇÔ∏è',
    beats: 'pap√≠r',
  },
  {
    name: 'pap√≠r',
    emoji: 'üìÑ',
    beats: 'k√°men',
  },
]

export const data: CommandData = {
  name: 'rps',
  description: 'Zahraj si k√°men, n≈Ø≈æky, pap√≠r!',
  options: [
    {
      name: 'hr√°ƒç',
      description: 'Vyber hr√°ƒçe, kter√©ho chce≈° vyzvat.',
      type: ApplicationCommandOptionType.User,
      required: true,
    },
  ],
  contexts: [0],
}

export const options: CommandOptions = {
  deleted: false,
}

export async function run({ interaction, client, handler }: SlashCommandProps) {
  try {
    const guildConfiguration = await GuildConfiguration.findOne({
      guildId: interaction.guildId,
    })

    if (!guildConfiguration?.gameChannelIds.length) {
      return await interaction.reply({
        content:
          'Tento server nebyl je≈°tƒõ nastaven pro pou≈æ√≠v√°n√≠ p≈ô√≠kazu `/rps`. Kontaktujte pros√≠m administr√°tory serveru.',
        ephemeral: true,
      })
    }

    if (!guildConfiguration.gameChannelIds.includes(interaction.channelId)) {
      return await interaction.reply({
        content: `Tento kan√°l nen√≠ nastaven pro pou≈æ√≠v√°n√≠ p≈ô√≠kazu \`/rps\`. Zkuste jeden z tƒõchto kan√°l≈Ø: ${guildConfiguration.gameChannelIds
          .map((id) => `<#${id}>`)
          .join(', ')}.`,
        ephemeral: true,
      })
    }

    const targetUser = (
      interaction.options as CommandInteractionOptionResolver
    ).getUser('hr√°ƒç', true)

    if (interaction.user.id === targetUser.id) {
      return interaction.reply({
        content: 'Nem≈Ø≈æe≈° hr√°t s√°m se sebou.',
        ephemeral: true,
      })
    }

    if (targetUser.bot) {
      return interaction.reply({
        content: 'Nem≈Ø≈æe≈° hr√°t s botem.',
        ephemeral: true,
      })
    }

    const embed = new EmbedBuilder()
      .setTitle('K√°men, n≈Ø≈æky, pap√≠r!')
      .setDescription(`Nyn√≠ je na ≈ôadƒõ ${targetUser}!`)
      .setColor('Yellow')

    const buttons = choices.map((choice) => {
      return new ButtonBuilder()
        .setCustomId(choice.name)
        .setLabel(choice.name)
        .setStyle(ButtonStyle.Primary)
        .setEmoji(choice.emoji)
    })

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(buttons)

    const reply = await interaction.reply({
      content: `${targetUser}, byl jsi vyzv√°n hr√°ƒçem ${interaction.user} na hru K√°men N≈Ø≈æky Pap√≠r! Pro zaƒç√°tek hry si vyber jednu z mo≈ænost√≠.`,
      embeds: [embed],
      components: [row],
    })

    const targetUserInteraction = await reply
      .awaitMessageComponent({
        filter: (i) => i.user.id === targetUser.id,
        time: 30_000,
      })
      .catch(async (error) => {
        embed.setDescription(
          `Hra byla zru≈°ena, proto≈æe ${targetUser} neodpovƒõdƒõl/a vƒças.`
        )
        await reply.edit({
          content: '',
          embeds: [embed],
          components: [],
        })
      })

    if (!targetUserInteraction) return

    const targetUserChoice = choices.find(
      (choice) => choice.name === targetUserInteraction.customId
    )

    await targetUserInteraction.reply({
      content: `Vybral/a sis ${targetUserChoice?.name} ${targetUserChoice?.emoji}.`,
      ephemeral: true,
    })

    embed.setDescription(
      `Nyn√≠ je na ≈ôadƒõ ${interaction.user}! Vyber jednu z mo≈ænost√≠.`
    )
    await reply.edit({
      content: `Nyn√≠ je ≈ôada na tobƒõ, ${interaction.user}!`,
      embeds: [embed],
    })

    const initialUserInteraction = await reply
      .awaitMessageComponent({
        filter: (i) => i.user.id === interaction.user.id,
        time: 30_000,
      })
      .catch(async (error) => {
        embed.setDescription(
          `Hra byla zru≈°ena, proto≈æe ${interaction.user} neodpovƒõdƒõl/a vƒças.`
        )
        await reply.edit({
          content: '',
          embeds: [embed],
          components: [],
        })
      })

    if (!initialUserInteraction) return

    const initialUserChoice = choices.find(
      (choice) => choice.name === initialUserInteraction.customId
    )

    let result = ''

    if (targetUserChoice?.beats === initialUserChoice?.name) {
      result = `${targetUser} vyhr√°l/a!`
    }

    if (initialUserChoice?.beats === targetUserChoice?.name) {
      result = `${interaction.user} vyhr√°l/a!`
    }

    if (targetUserChoice?.name === initialUserChoice?.name) {
      result = 'Rem√≠za!'
    }

    embed.setDescription(
      `${targetUser} vybral/a ${targetUserChoice?.name} ${targetUserChoice?.emoji} \n${interaction.user} vybral/a ${initialUserChoice?.name} ${initialUserChoice?.emoji}. \n\n${result}`
    )
    reply.edit({
      content: '',
      embeds: [embed],
      components: [],
    })
  } catch (error) {
    console.error(error)
    interaction.reply('Nƒõco se pokazilo.')
  }
}
